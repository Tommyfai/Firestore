// @function vendor-pref($property,$value) {
// @return -webkit-#{$property}: $value;
// }
/* ---------------------------------- */
/* --------- functions (Start)------- */
@mixin loop-code($x: 5, $type: margin, $value: 3px, $extra: '') {
  @for $x from 1 through $x {
    .ui-#{$type}-#{pz($x)} {
      #{$type}: ($value * $x) unquote($extra) !important;
    }
    .ui-#{$type}-top-#{pz($x)} {
      #{$type}-top: ($value * $x) unquote($extra) !important;
    }
    .ui-#{$type}-left-#{pz($x)} {
      #{$type}-left: ($value * $x) unquote($extra) !important;
    }
    .ui-#{$type}-right-#{pz($x)} {
      #{$type}-right: ($value * $x) unquote($extra) !important;
    }
    .ui-#{$type}-bottom-#{pz($x)} {
      #{$type}-bottom: ($value * $x) unquote($extra) !important;
    }
  }
}
// @include loop-code(10, 'padding');
// @include loop-code(10, 'margin');
// @include loop-code(10, 'border', 1px, 'solid red');
@mixin vendor-pref($property, $value, $ipt: false) {
  @if ($ipt == false) {
    -webkit-#{$property}: $value;
    //-khtml-#{$property}: $value;
    //-moz-#{$property}: $value;
    -ms-#{$property}: $value;
    //-o-#{$property}: $value;
    #{$property}: $value;
  } @else {
    -webkit-#{$property}: $value $ipt;
    //-khtml-#{$property}: $value $ipt;
    //-moz-#{$property}: $value $ipt;
    -ms-#{$property}: $value $ipt;
    //-o-#{$property}: $value $ipt;
    #{$property}: $value $ipt;
  }
}
@mixin clear-fix() {
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  & {
    *zoom: 1;
  }
}
@function pz($i) {
  @if ($i < 10) {
    @return '0' + $i;
  } @else {
    @return $i;
  }
}
@mixin bg-rgba($color: #ff0000, $alpha: 0.5) {
  $rgba: rgba(red($color), green($color), blue($color), $alpha); //@error $argb;
  $argb: ie-hex-str($rgba);
  background-color: $color;
  background-color: $rgba;
  filter: 'progid:DXImageTransform.Microsoft.gradient(enabled=false, startColorstr=#{$argb}, endColorstr=#{$argb})';
  -ms-filter: 'progid:DXImageTransform.Microsoft.gradient(enabled=false, startColorstr=#{$argb}, endColorstr=#{$argb})';
}
@mixin border-radius($radius: 50%, $ipt: false) {
  @include vendor-pref(border-radius, $radius, $ipt);
}
@mixin border-radiuses(
  $topright: 0,
  $bottomright: 0,
  $bottomleft: 0,
  $topleft: 0,
  $ipt: false
) {
  @include vendor-pref(border-top-right-radius, $topright, $ipt);
  @include vendor-pref(border-bottom-right-radius, $bottomright, $ipt);
  @include vendor-pref(border-bottom-left-radius, $bottomleft, $ipt);
  @include vendor-pref(border-top-left-radius, $topleft, $ipt);
  @include vendor-pref(background-clip, padding-box, $ipt);
  //@include border-radiuses(10px, 25px, 10px, 18px);
}
@mixin box-sizing($type: border-box, $ipt: false) {
  @include vendor-pref(box-sizing, $type, $ipt);
}
@mixin transition-vendor(
  $pmrs: all 0.2s cubic-bezier(0.94, 0.06, 0.05, 0.95) 0s
) {
  @include vendor-pref(transition, $pmrs);
}
@mixin transition($pmrs...) {
  $all-pmrs: '';
  @each $transition in $pmrs {
    @if index($pmrs, $transition) > 1 {
      $all-pmrs: $all-pmrs + ', ' + $transition;
    } @else {
      $all-pmrs: $all-pmrs + $transition;
    }
  }
  @if unquote($all-pmrs) == '' {
    @include transition-vendor();
  } @else {
    @include transition-vendor(unquote($all-pmrs));
  }
}
@mixin transform($pmrs) {
  @include vendor-pref(transform, $pmrs);
}
@mixin transform-origin($pmrs: 0% 0%) {
  @include vendor-pref(transform-origin, $pmrs);
}
$timing-00: linear;
$timing-01: cubic-bezier(0.175, 0.885, 0.32, 1.275);
$timing-02: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$timing-03: cubic-bezier(0.95, 0.05, 0.05, 0.95);
$timing-04: cubic-bezier(0.23, 1, 0.32, 1); // easeOutQuint
$timing-05: cubic-bezier(0.075, 0.82, 0.165, 1); // easeOutCirc
$timing-06: cubic-bezier(0.15, 0.85, 0.15, 0.85);

/*
(property, duration, timing-function, delay)
@include transition(all 0.8s cubic-bezier(0.94, 0.06, 0.05, 0.95) 0s);
@include transition(all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) 0s);
@include transition(all 0.8s cubic-bezier(.98,-0.41,0,1.5) 0s);
@include transition(all 0.8s cubic-bezier(.38,-1,.56,1.93) 0s);
@include transition();
@include transform-origin(center center);
@include transform-origin(left top);
@include transform-origin(50% 20%);
@include transform(rotate(45deg));		
@include transform(translateY(-50%));	
@include transform(scaleY(0.6));	
@include transform(translate(50%, 50%) rotate(90deg)); 
---------- forward -------------
@include transition(all 0.8s cubic-bezier(0.550, 0.055, 0.675, 0.190) 0s);
---------- backward -------------
@include transition(all 0.8s cubic-bezier(0.175, 0.885, 0.320, 1) 0s);
@include transition(all 0.2s @timing-02 0s);
*/
@mixin opacity($pmr: 0.5) {
  // 0 - 1
  $pm: $pmr * 100;
  opacity: $pmr;
  filter: alpha(opacity=$pm);
  zoom: 1;
}
@mixin scale($pmr: 0.5) {
  @include transform-origin(center center);
  @include transform(scale($pmr));
}
@mixin rotate($pmr: 360) {
  @include transform-origin(center center);
  @include transform(rotate($pmr + deg));
}
@mixin blur($pmr: 10) {
  @include vendor-pref(filter, blur($pmr + px));
}
@mixin box-shadow($pmrs: 0px 0px 16px rgba(0, 0, 0, 0.2), $ipt: false) {
  @include vendor-pref(box-shadow, $pmrs, $ipt);
}
/* @include box-shadow(2px 2px 2px rgba(0, 0, 0, 0.2)); */
@mixin text-shadow($pmrs: 1px 1px 0px rgba(0, 0, 0, 0.3), $ipt: false) {
  @include vendor-pref(text-shadow, $pmrs, $ipt);
}
/* @include text-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit; */
@mixin radial-gradient(
  $pos: center,
  $type: ellipse typefarthest-corner,
  $color1: #e4c454,
  $p1: 50%,
  $color2: #d1aa21,
  $p2: 100%,
  $ipt: false
) {
  @if ($ipt == false) {
    background: $color1; /* Old browsers */
    background: -moz-radial-gradient(
      $pos,
      $type,
      $color1 $p1,
      $color2 $p2
    ); /* FF3.6-15 */
    background: -webkit-radial-gradient(
      $pos,
      $type,
      $color1 $p1,
      $color2 $p2
    ); /* Chrome10-25,Safari5.1-6 */
    background: radial-gradient(
      $type at $pos,
      $color1 $p1,
      $color2 $p2
    ); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color1}', endColorstr='#{$color2}',GradientType=1 );
  } @else {
    background: $color1 $ipt; /* Old browsers */
    background: -moz-radial-gradient($pos, $type, $color1 $p1, $color2 $p2)
      $ipt; /* FF3.6-15 */
    background: -webkit-radial-gradient($pos, $type, $color1 $p1, $color2 $p2)
      $ipt; /* Chrome10-25,Safari5.1-6 */
    background: radial-gradient($type at $pos, $color1 $p1, $color2 $p2)
      $ipt; /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color1}', endColorstr='#{$color2}',GradientType=1 ) $ipt;
  }
  /* IE6-9 fallback on horizontal gradient */
  // $type ellipse and circle
  // $type (farthest-corner and closest-side) > (cover and contain)
  // $type (farthest-side and closest-corner)
  // @include radial-gradient(center, ellipse farthest-corner, #FF0000, 0%, #990000, 100%);
}
@mixin linear-gradient(
  $color1: #e4c454,
  $p1: 0%,
  $color2: #d1aa21,
  $p2: 100%,
  $ipt: false
) {
  @if ($ipt == false) {
    background: -moz-linear-gradient(top, $color1 $p1, $color2 $p2);
    background: -webkit-gradient(
      linear,
      left top,
      left bottom,
      color-stop($p1, $color1),
      color-stop($p2, $color2)
    );
    background: -webkit-linear-gradient(top, $color1 $p1, $color2 $p2);
    background: -o-linear-gradient(top, $color1 $p1, $color2 $p2);
    background: -ms-linear-gradient(top, $color1 $p1, $color2 $p2);
    background: linear-gradient(to bottom, $color1 $p1, $color2 $p2);
  } @else {
    background: -moz-linear-gradient(top, $color1 $p1, $color2 $p2) $ipt;
    background: -webkit-gradient(
        linear,
        left top,
        left bottom,
        color-stop($p1, $color1),
        color-stop($p2, $color2)
      )
      $ipt;
    background: -webkit-linear-gradient(top, $color1 $p1, $color2 $p2) $ipt;
    background: -o-linear-gradient(top, $color1 $p1, $color2 $p2) $ipt;
    background: -ms-linear-gradient(top, $color1 $p1, $color2 $p2) $ipt;
    background: linear-gradient(to bottom, $color1 $p1, $color2 $p2) $ipt;
  }
  // @include linear-gradient(#FF0000, 0%, #990000, 100%);
}
//.AAA{
//@include linear-gradient(#FF0000, 0%, #990000, 100%, !important);
//}
@mixin float($pmr: none) {
  position: absolute;
  @include transform-origin(50% 50%);
  @if $pmr == left {
    left: 0%;
  }
  @if $pmr == center {
    left: 50%;
    @include transform(translateX(-50%));
  }
  @if $pmr == right {
    right: 0%;
  }
  @if $pmr == top {
    top: 0%;
  }
  @if $pmr == middle {
    top: 50%;
    @include transform(translateY(-50%));
  }
  @if $pmr == bottom {
    bottom: 0%;
  }
  @if $pmr == centerTop or $pmr == topCenter {
    top: 0%;
    left: 50%;
    @include transform(translateX(-50%));
  }
  @if $pmr == centerMiddle or $pmr == middleCenter {
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
  }
  @if $pmr == centerBottom or $pmr == bottomCenter {
    bottom: 0%;
    left: 50%;
    @include transform(translateX(-50%));
  }
  @if $pmr == leftTop or $pmr == topLeft {
    top: 0%;
    left: 0%;
  }
  @if $pmr == leftMiddle or $pmr == middleLeft {
    left: 0%;
    top: 50%;
    @include transform(translateY(-50%));
  }
  @if $pmr == leftBottom or $pmr == bottomLeft {
    bottom: 0%;
    left: 0%;
  }
  @if $pmr == rightTop or $pmr == topRight {
    right: 0%;
    top: 0%;
  }
  @if $pmr == rightMiddle or $pmr == middleRight {
    right: 0%;
    top: 50%;
    @include transform(translateY(-50%));
  }
  @if $pmr == rightBottom or $pmr == bottomRight {
    right: 0%;
    bottom: 0%;
  }
}
@mixin truncate {
  /*truncate*/
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
@mixin animation-init(
  $name: ani-default-name,
  $duration: 1s,
  $function: linear,
  $count: infinite
) {
  @include vendor-pref(animation-name, $name);
  @include vendor-pref(animation-duration, $duration);
  @include vendor-pref(animation-timing-function, $function);
  @include vendor-pref(animation-iteration-count, $count);
  @include vendor-pref(animation-fill-mode, forwards);
}
@mixin keyframes($animation) {
  @-webkit-keyframes #{$animation} {
    @content;
  }
  @-moz-keyframes #{$animation} {
    @content;
  }
  @-ms-keyframes #{$animation} {
    @content;
  }
  @-o-keyframes #{$animation} {
    @content;
  }
  @keyframes #{$animation} {
    @content;
  }
}
@mixin blinker-me() {
  @include animation-init(blinker, 2s, linear, infinite);
}
.blinker-me {
  @include animation-init(blinker, 2s, linear, infinite);
}
@mixin blinker-me-stop {
  @include vendor-pref(animation-name, none);
}
.blinker-me-stop {
  @include vendor-pref(animation-name, none);
}
@mixin blinker-frames {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.3;
  }
  80% {
    opacity: 1;
  }
  100% {
    opacity: 1;
  }
}
@include keyframes(blinker) {
  @include blinker-frames();
}

.fadein-me {
  @include animation-init(fadein, 0.5s, linear, 1);
}
@mixin fadein-frames() {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@include keyframes(fadein) {
  @include fadein-frames();
}

.fadeout-me {
  @include animation-init(fadeout, 0.5s, linear, 1);
}
@mixin fadeout-frames() {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
@include keyframes(fadeout) {
  @include fadeout-frames();
}

.shake-me {
  @include transform-origin(50% 10%);
  @include animation-init(
    shaker,
    0.5s,
    cubic-bezier(0.94, 0.06, 0.05, 0.95),
    infinite
  );
}
@mixin shaker-frames() {
  0% {
    @include transform(rotate(0deg));
    @include opacity(1);
  }
  40% {
    @include transform(rotate(-10deg));
    @include opacity(0.5);
  }
  60% {
    @include transform(rotate(10deg));
    @include opacity(0.7);
  }
  100% {
    @include transform(rotate(0deg));

    @include opacity(1);
  }
}
@include keyframes(shaker) {
  @include shaker-frames();
}

.rotate-me {
  @include transform-origin(50% 50%);
  @include animation-init(rotator, 2.5s, $timing-00, infinite);
}
@mixin rotator-frames() {
  0% {
    @include transform(rotate(0deg));
    @include opacity(1);
  }
  25% {
    @include transform(rotate(-90deg));
    @include opacity(0.75);
  }
  50% {
    @include transform(rotate(-180deg));
    @include opacity(0.55);
  }
  75% {
    @include transform(rotate(-270deg));
    @include opacity(0.75);
  }
  100% {
    @include transform(rotate(-360deg));
    @include opacity(1);
  }
}
@include keyframes(rotator) {
  @include rotator-frames();
}
@mixin placeholder($color1: #e4c454) {
  &::-webkit-input-placeholder {
    color: $color1;
  }
  &::-moz-placeholder {
    color: $color1;
  }
  &:-ms-input-placeholder {
    color: $color1;
  }
  &:-moz-placeholder {
    color: $color1;
  }
}
/* --------- functions (End)--------- */
/* ---------------------------------- */

@mixin resetUL {
  // resetUL
  ul,
  li {
    margin: 0px;
    padding: 0px;
    list-style: none;
    display: inline-block;
  }
}
$widescreen: 1280px;
$desktop: 980px;
$tablet: 768px;
$mobile: 414px;
@mixin widescreen {
  @media (min-width: #{$widescreen}) {
    @content;
  }
}
@mixin desktop {
  @media (max-width: #{$desktop}) {
    @content;
  }
}
@mixin tablet {
  @media (max-width: #{$tablet}) {
    @content;
  }
}
@mixin mobile {
  @media (max-width: #{$mobile}) {
    @content;
  }
}
@mixin mobile-max {
  @media (min-width: #{$mobile + 1}) {
    @content;
  }
}
@mixin desktop-widescreen {
  @media (min-width: #{$desktop}) and (max-width: #{$widescreen - 1}) {
    @content;
  }
}
@mixin tablet-desktop {
  @media (max-width: #{$tablet}) and (max-width: #{$desktop - 1}) {
    @content;
  }
}
@mixin mobile-tablet {
  @media (max-width: #{$mobile}) and (max-width: #{$tablet - 1}) {
    @content;
  }
}
// @include widescreen {}
// @include desktop-widescreen {}
// @include desktop {}
// @include tablet-desktop {}
// @include tablet {}
// @include mobile-tablet {}
// @include mobile {}
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
// .flex-wrapper { @include flexbox(); }
// .flex-item { @include flex(1 200px); @include order(2); }
@mixin wildcard($class: defaultClass, $type: contain) {
  @if ($type == contain) {
    // containing
    [class*='#{$class}'] {
      @content;
    }
  }
  @if ($type == start) {
    // Starts with
    [class^='#{$class}'] {
      @content;
    }
  }
  @if ($type == end) {
    // Ends with
    [class$='#{$class}'] {
      @content;
    }
  }
  @if ($type == space) {
    // containing (width space)
    [class~='#{$class}'] {
      @content;
    }
  }
}
// Ensure CSS grid works with IE 11 spec.
// https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
// sass-lint:disable no-vendor-prefixes, no-duplicate-properties
@mixin display-grid {
  display: -ms-grid;
  display: grid;
}
// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}
// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
  -ms-grid-rows: $rows;
  grid-template-rows: $rows;
}
// Can be used in combination with above grid-template-X mixins.
// These result in the same output:
// @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
// @include grid-template-columns(10px 20px 20px 20px 20px 30px);
@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();
  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }
  @return $list;
}
@mixin grid-column($col-start, $col-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  grid-column: #{$col-start} / #{$col-end};
}
@mixin grid-row($row-start, $row-end) {
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
  grid-row: #{$row-start} / #{$row-end};
}
@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}
@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}
@mixin grid-template-areas($areas...) {
  //grid-template: $areas;
  grid-template-areas: $areas;
}
@mixin grid-area($value) {
  //: $value;
  grid-area: $value;
}
@function PF($name) {
  @return '__' + $name + '--';
}

//@include change-state(cBg, background-color, red, green, 10s);
@mixin change-state($name, $ani, $prop, $valFrom, $valTo, $dur) {
  #{$name} {
    @include animation-init($ani, $dur, linear, 1);
  }
  @include keyframes($ani) {
    from {
      #{$prop}: $valFrom;
    }
    to {
      #{$prop}: $valTo;
    }
  }
}

@mixin delay-prop($prop, $valFrom, $valTo, $delay) {
  $tmp: delay-#{$prop}-#{random(500)}-delay;
  #{$prop}: $valTo;
  animation: $delay $tmp;
  @keyframes #{$tmp} {
    from {
      #{$prop}: $valFrom;
    }
  }
}
